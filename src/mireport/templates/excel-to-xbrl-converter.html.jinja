{% extends "base.html.jinja" %}

{% block title %}VSME Digital Template to XBRL Converter{% endblock %}

{% block content %}


<!-- Info Section -->
<div class="text-sm text-gray-700 space-y-2">
  <p class="font-medium">Follow these steps to convert your VSME Digital Template to the XBRL format:</p>
  <ol class="list-decimal list-inside space-y-1 pl-4">
    <li>Download the <a href="https://xbrl.efrag.org/downloads/vsme/VSME-Digital-Template-latest.xlsx" class="text-blue-600 underline hover:text-blue-800">VSME Digital Template</a> provided by EFRAG (or test the <a href="https://xbrl.efrag.org/downloads/vsme/VSME-Digital-Template-sample-latest.xlsx" class="text-blue-600 underline hover:text-blue-800">sample report</a>).</li>
    <li>Follow the instructions in the Digital Template and fill in the required disclosures in each worksheet. Before starting the conversion, ensure that the Overall Validation Status shows "OK".</li>
    <li>Select the Digital Template file below and start the conversion. The conversion process may take a few minutes.</li>
    <li>Review the generated XBRL report and the messages to ensure that all disclosures are complete and accurate.</li>
    <li>Download and save your converted XBRL files.</li>
  </ol>
</div>

<!-- Flash Error Messages -->
{% with messages = get_flashed_messages(with_categories=true) %}
  {% if messages %}
    {% for category, message in messages %}
      {% if category == 'error' %}
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
          <span class="block sm:inline">{{ message }}</span>
        </div>
      {% endif %}
    {% endfor %}
  {% endif %}
{% endwith %}


<!-- Loading Spinner -->
<div id="loadingSpinner" class="flex fixed inset-0 bg-black/80 items-center justify-center z-50 hidden">
  <div class="flex items-center text-white text-lg font-bold border-4 border-white p-4 rounded-lg bg-black">
    <!-- Animated Spinner -->
    <svg class="mr-3 h-5 w-5 animate-spin text-white" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 008 8V4a8 8 0 00-8 8z"></path>
    </svg>
    Converting... Please wait.
  </div>
</div>


<!-- Upload Form -->
<form action="{{ url_for('basic.upload') }}" method="post" enctype="multipart/form-data" class="space-y-4" onsubmit="showSpinner()">

  <!-- Digital Template File -->
  <div>
    <label for="file" class="block text-sm font-medium text-gray-700 mb-1">Choose the XLSX Digital Template file</label>
    <input type="file" id="file" name="file" accept=".xlsx"
      class="block w-full text-sm text-gray-700 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
      required />
  </div>

  <!-- Optional Corporate Logo -->
  <div>
    <label for="logo" class="block text-sm font-medium text-gray-700 mb-1">
      Choose logo <span class="text-gray-500 font-normal">(optional)</span>
    </label>
    <input type="file" id="logo" name="logo" accept="image/*"
      class="block w-full text-sm text-gray-700 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
    <div id="logoPreview" class="mt-2 hidden">
      <p class="text-sm text-gray-500">Preview:</p>
      <img id="logoImage" src="#" alt="Logo Preview" class="max-h-24 mt-1 rounded shadow" />
    </div>
  </div>

  <!-- Language / Country Formatting -->
  <div>
    <label class="block text-sm font-medium text-gray-700 mb-2">
      Report output language
    </label>

    <div class="space-y-2">
      <!-- Option 1: Detect -->
      <label class="flex items-center space-x-2">
        <input type="radio" name="localeOption" value="detect" checked
          class="text-blue-600 focus:ring-blue-500 border-gray-300" />
        <span class="text-sm text-gray-700">Detect from template</span>
      </label>

      <!-- Option 2: Manual -->
      <label class="flex items-center space-x-2">
        <input type="radio" name="localeOption" value="manual"
          class="text-blue-600 focus:ring-blue-500 border-gray-300" />
        <span class="text-sm text-gray-700">Specify manually</span>
      </label>

      <!-- Manual select dropdown -->
      <select id="locale" name="locale"
        class="mt-1 block w-full text-sm font-mono text-gray-800 border border-gray-300 rounded-lg bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 hidden">
        <!-- Dynamically populated -->
      </select>
    </div>
  </div>


  {% if ENABLE_CAPTCHA %}
  <input type="hidden" name="csrf_token" value="{{ session.csrf_token }}" />
  <div>
    <label id="captchaLabel" for="captcha" class="block text-sm font-medium text-gray-700 mb-1"></label>
    <input type="text" id="captcha" name="captcha"
      title="Please calculate the sum of the two numbers in order to check that you are human."
      class="block w-full text-sm text-gray-700 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
      required />
  </div>
  {% endif %}

  <!-- Terms and Conditions -->
  <div class="flex items-center space-x-2">
    <input id="terms" type="checkbox" required
      class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500" />
    <label for="terms" class="text-sm text-gray-600">
      I agree to the
      <button type="button" id="termsButton" class="text-blue-600 underline">terms and conditions</button>.
    </label>
  </div>

  <!-- Submit Button -->
  <button type="submit"
    class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition">
    Upload & Convert Digital Template
  </button>

  {% if existing_conversions %}
  <a href="{{ url_for('basic.conversions') }}" class="w-full text-center inline-block px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-lg transition">
    Access My Previous Conversions
  </a>
  {% endif %}
</form>

<script>
document.addEventListener("DOMContentLoaded", () => {
  // -----------------------------
  // CAPTCHA fetch logic (only if enabled)
  // -----------------------------
  {% if ENABLE_CAPTCHA %}
  async function fetchCaptcha() {
    const response = await fetch("{{ url_for('basic.generate_captcha') }}", { credentials: "include" });
    const data = await response.json();
    const label = document.getElementById('captchaLabel');
    if (label && data.question) {
      label.textContent = data.question;
    }
  }

  const captchaLabelExists = document.getElementById('captchaLabel');
  if (captchaLabelExists) {
    fetchCaptcha();
  }
  {% endif %}

  // -----------------------------
  // Locale selection logic
  // -----------------------------
  const select = document.getElementById("locale");
  const radios = document.querySelectorAll('input[name="localeOption"]');
  let normalizedLocales = [];

  async function loadLocaleOptions() {
    const res = await fetch("{{ url_for('basic.available_locales') }}");
    const locales = await res.json();

    normalizedLocales = locales.map(loc => ({
      code: loc.code,
      codeNormalized: loc.code.toLowerCase().replace(/_/g, "-"),
      label: loc.label
    }));

    select.innerHTML = "";

    normalizedLocales.forEach(locale => {
      const option = document.createElement("option");
      option.value = locale.code;
      option.textContent = locale.label;
      select.appendChild(option);
    });
  }

  function detectBestMatch() {
    const browserLocale = (navigator.language || navigator.userLanguage || "")
                          .toLowerCase()
                          .replace(/_/g, "-");

    let match = normalizedLocales.find(loc => loc.codeNormalized === browserLocale);

    if (!match && browserLocale.includes("-")) {
      const baseLang = browserLocale.split("-")[0];
      match = normalizedLocales.find(loc => loc.codeNormalized === baseLang);
      if (!match) {
        match = normalizedLocales.find(loc => loc.codeNormalized.startsWith(baseLang + "-"));
      }
    }

    if (match) {
      select.value = match.code;
    } else {
      select.selectedIndex = -1;
    }
  }

  loadLocaleOptions().then(detectBestMatch);

  radios.forEach(radio => {
    radio.addEventListener("change", () => {
      if (radio.value === "manual" && radio.checked) {
        select.classList.remove("hidden");
        detectBestMatch();
      } else if (radio.value === "detect" && radio.checked) {
        select.classList.add("hidden");
        select.selectedIndex = -1;
      }
    });
  });

  // -----------------------------
  // Logo preview logic
  // -----------------------------
  const logoInput = document.getElementById("logo");
  const logoPreview = document.getElementById("logoPreview");
  const logoImage = document.getElementById("logoImage");

  function previewLogo(event) {
    const file = event.target.files[0];
    const maxWidth = 5000;
    const maxHeight = 5000;

    if (!file) return;

    if (!file.type.startsWith("image/")) {
      alert("Please select a valid image file.");
      event.target.value = "";
      return;
    }

    const reader = new FileReader();
    reader.onload = function(e) {
      const img = new Image();
      img.onload = function() {
        if (img.width > maxWidth || img.height > maxHeight) {
          alert(`Image dimensions should be at most ${maxWidth}px × ${maxHeight}px. Your image is ${img.width}px × ${img.height}px.`);
          event.target.value = "";
          logoPreview.classList.add("hidden");
          return;
        }
        logoImage.src = e.target.result;
        logoPreview.classList.remove("hidden");
      };
      img.src = e.target.result;
    };
    reader.readAsDataURL(file);
  }

  logoInput.addEventListener("change", previewLogo);
});
</script>
{% endblock %}
